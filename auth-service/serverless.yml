# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: auth
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x

# you can overwrite defaults here
  stage: prod
  region: eu-west-1
  environment:
    DB_NAME: "ddhome-auth"

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - lambda:InvokeFunction
        - secretsmanager:GetSecretValue
      Resource: "*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  individually: true

functions:
  findIdentity:
    handler: handler.findIdentity
    events:
      - http:
          path: findIdentity
          method: get
          cors: true
          authorizer: aws_iam

  findUser:
    handler: handler.findUser
    events:
      - http:
          path: findUser
          method: post
          cors: true
    environment:
      COLLECTION_NAME: "user"

  createUser:
    handler: handler.createUser
    events:
      - http:
          path: createUser
          method: post
          cors: true
          authorizer: aws_iam
    environment:
      COLLECTION_NAME: "user"

  updateUser:
    handler: handler.updateUser
    events:
      - http:
          path: updateUser
          method: put
          cors: true
          authorizer: aws_iam
    environment:
      COLLECTION_NAME: "user"

  findUserProfile:
    handler: handler.findUserProfile
    events:
      - http:
          path: findUserProfile
          method: post
          cors: true
          authorizer: aws_iam
    environment:
      COLLECTION_NAME: "userProfile"

  createUserProfile:
    handler: handler.createUserProfile
    events:
      - http:
          path: createUserProfile
          method: post
          cors: true
          authorizer: aws_iam
    environment:
      COLLECTION_NAME: "userProfile"

  updateUserProfile:
    handler: handler.updateUserProfile
    events:
      - http:
          path: updateUserProfile
          method: put
          cors: true
          authorizer: aws_iam
    environment:
      COLLECTION_NAME: "userProfile"
# you can add CloudFormation resource templates here
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-domain-manager
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
  domains:
    prod: api.taleofddh.com
    staging: staging-api.taleofddh.com
    dev: dev-api.taleofddh.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: "auth"
    stage: ${self:custom.stage}
    certificateName: "*.taleofddh.com"
    hostedZoneId: ${opt:HOSTED_ZONE_ID}
    createRoute53Record: true
    endpointType: edge
    securityPolicy: tls_1_2
    apiType: rest
